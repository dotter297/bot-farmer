# reg sesion, main menu, fsm
import logging
from aiogram import types
from aiogram.dispatcher import Dispatcher
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from telethon import TelegramClient
from database import save_api_keys, get_api_keys, get_all_accounts, delete_account
from handlers.broadcast_handler import handle_broadcast_menu
from handlers.subscription_handler import handle_subscription_menu

# –ù–∞—Å—Ç—Ä–æ–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
class AuthStates(StatesGroup):
    waiting_for_phone = State()
    waiting_for_api_keys = State()
    waiting_for_code = State()
    waiting_for_delete = State()

auth_clients = {}  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ

def register_auth_handlers(dp: Dispatcher):
    dp.register_message_handler(handle_sessions, Text(equals="üìÇ –°–µ—Å—Å–∏–∏"), state=None)
    dp.register_message_handler(handle_add_account, Text(equals="üì≤ –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç"), state=None)
    dp.register_message_handler(process_phone, state=AuthStates.waiting_for_phone)
    dp.register_message_handler(handle_set_api, Text(equals="üîë –í–≤–µ—Å—Ç–∏ API –∫–ª—é—á–∏"), state=None)
    dp.register_message_handler(process_api_keys, state=AuthStates.waiting_for_api_keys)
    dp.register_message_handler(handle_confirm_code, Text(equals="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Ö–æ–¥"), state=None)
    dp.register_message_handler(process_confirmation_code, state=AuthStates.waiting_for_code)
    dp.register_message_handler(handle_delete_account, Text(equals="üóë –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç"), state=None)
    dp.register_message_handler(process_delete_account, state=AuthStates.waiting_for_delete)
    dp.register_message_handler(handle_account_statistics, Text(equals="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"), state=None)
    dp.register_message_handler(handle_back, Text(equals="‚¨Ö –ù–∞–∑–∞–¥"), state="*")  # ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ!
    dp.register_message_handler(handle_broadcast_menu, Text(equals="üì¢ –†–∞—Å—Å—ã–ª–∫–∞"), state=None)
    dp.register_message_handler(handle_subscription_menu, Text(equals="üì¢ –ü–æ–¥–ø–∏—Å–∫–∏"), state=None)

def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üìÇ –°–µ—Å—Å–∏–∏"))
    keyboard.add(KeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞"))
    keyboard.add(KeyboardButton("üì¢ –ü–æ–¥–ø–∏—Å–∫–∏"))
    return keyboard


def get_sessions_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üì≤ –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç"))
    keyboard.add(KeyboardButton("üîë –í–≤–µ—Å—Ç–∏ API –∫–ª—é—á–∏"))
    keyboard.add(KeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Ö–æ–¥"))
    keyboard.add(KeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç"))
    keyboard.add(KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"))
    keyboard.add(KeyboardButton("‚¨Ö –ù–∞–∑–∞–¥"))
    return keyboard

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–µ—Å—Å–∏–∏"
async def handle_sessions(message: types.Message):
    accounts = get_all_accounts()
    count = len(accounts)
    response = f"üìä –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã: {count}\n"
    if count > 0:
        for acc in accounts:
            response += f"üìå {acc[1]} - –°—Ç–∞—Ç—É—Å: {acc[4]}\n"
    else:
        response += "‚ö† –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤."

    await message.reply(response, reply_markup=get_sessions_keyboard())

#  –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üóë –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç"
async def handle_delete_account(message: types.Message):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
    await AuthStates.waiting_for_delete.set()

#  –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
async def process_delete_account(message: types.Message, state: FSMContext):
    phone_number = message.text.strip()
    try:
        delete_account(phone_number)
        logger.info(f"–ê–∫–∫–∞—É–Ω—Ç {phone_number} —É–¥–∞–ª–µ–Ω.")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        await message.reply(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {phone_number} —É–¥–∞–ª–µ–Ω.", reply_markup=get_sessions_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {phone_number}: {e}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {phone_number}.", reply_markup=get_sessions_keyboard())
    await state.finish()

# –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
async def handle_account_statistics(message: types.Message):
    accounts = get_all_accounts()
    count = len(accounts)
    response = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤:\nüìå –í—Å–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ: {count}\n"
    if count > 0:
        for acc in accounts:
            response += f"üìå {acc[1]} - –°—Ç–∞—Ç—É—Å: {acc[4]}\n"
    else:
        response += "‚ö† –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤."
    await message.reply(response, reply_markup=get_sessions_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "‚¨Ö –ù–∞–∑–∞–¥"
async def handle_back(message: types.Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏.")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ—Ç–º–µ–Ω–∞ - –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é
    current_state = await state.get_state()

    if current_state is None:
        await message.reply("–í—ã —É–∂–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.", reply_markup=get_broadcast_keyboard())
    else:
        await message.reply("–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏...", reply_markup=get_broadcast_keyboard())

    await state.finish()


#  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç "üì≤ –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç"
async def handle_add_account(message: types.Message):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +79991234567", reply_markup=get_main_keyboard())
    await AuthStates.waiting_for_phone.set()

#  –í–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
async def process_phone(message: types.Message, state: FSMContext):
    phone_number = message.text
    auth_clients[message.chat.id] = {"phone_number": phone_number}
    logger.info(f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {phone_number} —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞
    await message.reply("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ API ID –∏ API HASH —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1234567 abcdefghijklmnopqrstuvwxyz)", reply_markup=get_main_keyboard())
    await AuthStates.waiting_for_api_keys.set()

#  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç "üîë –í–≤–µ—Å—Ç–∏ API –∫–ª—é—á–∏"
async def handle_set_api(message: types.Message):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ API ID –∏ API HASH —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª", reply_markup=get_main_keyboard())
    await AuthStates.waiting_for_api_keys.set()

#  –í–≤–æ–¥ API ID –∏ API HASH
async def process_api_keys(message: types.Message, state: FSMContext):
    if message.chat.id not in auth_clients or "phone_number" not in auth_clients[message.chat.id]:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ \"üì≤ –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç\".", reply_markup=get_main_keyboard())
        return

    args = message.text.split()
    if len(args) != 2:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ API ID –∏ API HASH —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.", reply_markup=get_main_keyboard())
        return

    api_id, api_hash = int(args[0]), args[1]
    phone_number = auth_clients[message.chat.id]["phone_number"]

    try:
        save_api_keys(phone_number, api_id, api_hash)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º API –≤ –±–∞–∑—É
        logger.info(f"API –∫–ª—é—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è {phone_number}.")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è API
        await message.reply(f"API –∫–ª—é—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è {phone_number}. –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Ö–æ–¥.", reply_markup=get_main_keyboard())
        await state.finish()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ API –∫–ª—é—á–µ–π –¥–ª—è {phone_number}: {e}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ API –∫–ª—é—á–µ–π.", reply_markup=get_main_keyboard())

#  –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
async def handle_confirm_code(message: types.Message):
    if message.chat.id not in auth_clients or "phone_number" not in auth_clients[message.chat.id]:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ API-–∫–ª—é—á–∏.", reply_markup=get_main_keyboard())
        return

    phone_number = auth_clients[message.chat.id]["phone_number"]
    api_keys = get_api_keys(phone_number)

    if not api_keys:
        await message.reply("API-–∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ –∏—Ö –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ \"üîë –í–≤–µ—Å—Ç–∏ API –∫–ª—é—á–∏\".", reply_markup=get_main_keyboard())
        return

    api_id, api_hash = api_keys
    session_name = f"session_{phone_number}"
    client = TelegramClient(session_name, api_id, api_hash)

    await client.connect()
    logger.info(f"üì© –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∫–æ–¥ –¥–ª—è {phone_number}")

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–æ–¥
        code_request = await client.send_code_request(phone_number)
        auth_clients[message.chat.id]["client"] = client
        auth_clients[message.chat.id]["phone_code_hash"] = code_request.phone_code_hash  # –û–±–Ω–æ–≤–ª—è–µ–º hash –∫–æ–¥–∞
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—à–µ–ª –≤–∞–º –≤ Telegram.", reply_markup=get_main_keyboard())
        await AuthStates.waiting_for_code.set()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞ –¥–ª—è {phone_number}: {e}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞: {e}", reply_markup=get_main_keyboard())

#  –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–¥–∞
async def process_confirmation_code(message: types.Message, state: FSMContext):
    if message.chat.id not in auth_clients or "phone_number" not in auth_clients[message.chat.id]:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ API-–∫–ª—é—á–∏.", reply_markup=get_main_keyboard())
        return

    phone_number = auth_clients[message.chat.id]["phone_number"]
    client = auth_clients[message.chat.id].get("client")
    phone_code_hash = auth_clients[message.chat.id].get("phone_code_hash")

    if not client or not phone_code_hash:
        await message.reply("–û—à–∏–±–∫–∞: –∫–æ–¥ –Ω–µ –±—ã–ª –∑–∞–ø—Ä–æ—à–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Ö–æ–¥ –∑–∞–Ω–æ–≤–æ.", reply_markup=get_main_keyboard())
        return

    try:
        # –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è —Å –Ω–æ–≤—ã–º –∫–æ–¥–æ–º
        await client.sign_in(phone_number, message.text, phone_code_hash=phone_code_hash)
        logger.info(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {phone_number} —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—Ö–∞
        await message.reply("‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!", reply_markup=get_main_keyboard())
        await state.finish()
    except Exception as e:
        if "confirmation code has expired" in str(e).lower():
            await message.reply("‚ùå –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É—Å—Ç–∞—Ä–µ–ª! –ù–∞–∂–º–∏—Ç–µ ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Ö–æ–¥, —á—Ç–æ–±—ã –∑–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–¥.", reply_markup=get_main_keyboard())
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∫–æ–¥–∞ –¥–ª—è {phone_number}: {e}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∫–æ–¥–∞: {e}", reply_markup=get_main_keyboard())


# —Ä–∞—Å—Å—ã–æ–∫–∞
import logging
from aiogram import types
from aiogram.dispatcher import Dispatcher
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from telethon import TelegramClient
from database import get_all_accounts


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
class BroadcastStates(StatesGroup):
    waiting_for_chat_id = State()
    waiting_for_message = State()
    waiting_for_account_selection = State()
    waiting_for_message_count = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π


broadcast_data = {}  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ


def register_broadcast_handlers(dp: Dispatcher):
    dp.register_message_handler(handle_broadcast_menu, Text(equals="üì¢ –†–∞—Å—Å—ã–ª–∫–∞"), state=None)
    dp.register_message_handler(start_broadcast, Text(equals="üì¢ –ù–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞"), state=None)
    dp.register_message_handler(handle_back, Text(equals="‚¨Ö –ù–∞–∑–∞–¥"), state="*")
    dp.register_message_handler(process_chat_id, state=BroadcastStates.waiting_for_chat_id)
    dp.register_message_handler(process_message, state=BroadcastStates.waiting_for_message)
    dp.register_message_handler(process_account_selection, state=BroadcastStates.waiting_for_account_selection)
    dp.register_message_handler(process_message_count, state=BroadcastStates.waiting_for_message_count)  # –ù–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞


def get_broadcast_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üì¢ –ù–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞"))
    keyboard.add(KeyboardButton("‚¨Ö –ù–∞–∑–∞–¥"))
    return keyboard


def get_cancel_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã"""
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("‚¨Ö –û—Ç–º–µ–Ω–∞"))
    return keyboard


# 1Ô∏è‚É£ –ú–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏
async def handle_broadcast_menu(message: types.Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏.")
    await message.reply("üì¢ –ú–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_broadcast_keyboard())


# 2Ô∏è‚É£ –ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏
async def start_broadcast(message: types.Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª –Ω–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É.")
    await message.reply("–í–≤–µ–¥–∏—Ç–µ ID —á–∞—Ç–∞, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è:")
    await BroadcastStates.waiting_for_chat_id.set()


# 3Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ ID —á–∞—Ç–∞
async def process_chat_id(message: types.Message, state: FSMContext):
    chat_id = message.text.strip()
    broadcast_data[message.chat.id] = {"chat_id": chat_id}

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª ID —á–∞—Ç–∞: {chat_id}")
    await message.reply("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å:", reply_markup=get_cancel_keyboard())
    await BroadcastStates.waiting_for_message.set()


# 4Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
async def process_message(message: types.Message, state: FSMContext):
    if message.chat.id not in broadcast_data:
        logger.warning(f"–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è {message.chat.id}. –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å.")
        await message.reply("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –∑–∞–Ω–æ–≤–æ.", reply_markup=get_broadcast_keyboard())
        await state.finish()
        return

    broadcast_data[message.chat.id]["message"] = message.text
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: {message.text}")

    accounts = get_all_accounts()
    if not accounts:
        logger.warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        await message.reply("‚ö† –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.", reply_markup=get_broadcast_keyboard())
        await state.finish()
        return

    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("–í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã"))
    for acc in accounts:
        keyboard.add(KeyboardButton(acc[1]))
    keyboard.add(KeyboardButton("‚¨Ö –û—Ç–º–µ–Ω–∞"))

    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=keyboard)
    await BroadcastStates.waiting_for_account_selection.set()


# 5Ô∏è‚É£ –í—ã–±–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
async def process_account_selection(message: types.Message, state: FSMContext):
    if message.chat.id not in broadcast_data:
        logger.warning(f"–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è {message.chat.id}. –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å.")
        await message.reply("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –∑–∞–Ω–æ–≤–æ.", reply_markup=get_broadcast_keyboard())
        await state.finish()
        return

    if message.text == "‚¨Ö –û—Ç–º–µ–Ω–∞":
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–º–µ–Ω–∏–ª —Ä–∞—Å—Å—ã–ª–∫—É.")
        await message.reply("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_broadcast_keyboard())
        await state.finish()
        return

    selected_accounts = []
    accounts = get_all_accounts()
    account_numbers = [acc[1] for acc in accounts]

    if message.text == "–í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã":
        selected_accounts = account_numbers
    elif message.text in account_numbers:
        selected_accounts.append(message.text)
    else:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç: {message.text}")
        await message.reply("‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    broadcast_data[message.chat.id]["accounts"] = selected_accounts
    chat_id = broadcast_data[message.chat.id]["chat_id"]
    message_text = broadcast_data[message.chat.id]["message"]

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    await message.reply("–°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ? –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:", reply_markup=get_cancel_keyboard())
    await BroadcastStates.waiting_for_message_count.set()


# 6Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def process_message_count(message: types.Message, state: FSMContext):
    if message.chat.id not in broadcast_data:
        logger.warning(f"–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è {message.chat.id}. –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å.")
        await message.reply("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –∑–∞–Ω–æ–≤–æ.", reply_markup=get_broadcast_keyboard())
        await state.finish()
        return

    if message.text == "‚¨Ö –û—Ç–º–µ–Ω–∞":
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–º–µ–Ω–∏–ª —Ä–∞—Å—Å—ã–ª–∫—É.")
        await message.reply("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_broadcast_keyboard())
        await state.finish()
        return

    try:
        message_count = int(message.text)
        if message_count < 1:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
    except ValueError:
        await message.reply("‚ö† –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π (—Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ).")
        return

    broadcast_data[message.chat.id]["message_count"] = message_count
    selected_accounts = broadcast_data[message.chat.id]["accounts"]
    chat_id = broadcast_data[message.chat.id]["chat_id"]
    message_text = broadcast_data[message.chat.id]["message"]

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–±—Ä–∞–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {message_count}")
    await message.reply(f"üì¢ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É {message_count} —Ä–∞–∑ –≤ {chat_id} —Å {len(selected_accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")

    accounts = get_all_accounts()
    for acc in accounts:
        if acc[1] in selected_accounts:
            session_name = f"session_{acc[1]}"
            client = TelegramClient(session_name, acc[3], acc[4])
            await client.connect()
            try:
                for _ in range(message_count):
                    await client.send_message(chat_id, message_text)
                    await message.reply(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å {acc[1]}")
                    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å {acc[1]} –≤ {chat_id}")
            except Exception as e:
                await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å {acc[1]}: {e}")
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å {acc[1]}: {e}")
            await client.disconnect()

    await state.finish()
    logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –≤ {chat_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


# 7Ô∏è‚É£ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚¨Ö –ù–∞–∑–∞–¥"
async def handle_back(message: types.Message, state: FSMContext):
    from handlers.auth_handler import get_main_keyboard
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏.")
    await message.reply("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_main_keyboard())
    await state.finish()
# –ø–æ–¥–ø–∏—Å–∫–∞
import asyncio
import logging
from aiogram import types, Dispatcher
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from telethon import TelegramClient
from database import get_all_accounts
from telethon.tl.functions.channels import JoinChannelRequest
from telethon.tl.functions.channels import LeaveChannelRequest

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
class SubscriptionStates(StatesGroup):
    waiting_for_channel = State()
    waiting_for_action = State()
    waiting_for_delay = State()
    waiting_for_account_count = State()


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏
async def handle_subscription_menu(message: types.Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("‚ûï –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"))
    keyboard.add(KeyboardButton("‚ûñ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è"))
    keyboard.add(KeyboardButton("‚¨Ö –ù–∞–∑–∞–¥"))
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)


# –í—ã–±–æ—Ä –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
async def handle_choose_channel(message: types.Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("‚¨Ö –ù–∞–∑–∞–¥"))
    await message.reply("–í–≤–µ–¥–∏—Ç–µ @—é–∑–µ—Ä–Ω–µ–π–º –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª:", reply_markup=keyboard)
    await SubscriptionStates.waiting_for_channel.set()


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∏ –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è
async def process_channel(message: types.Message, state: FSMContext):
    if message.text.strip() == "‚¨Ö –ù–∞–∑–∞–¥":
        await state.finish()
        await handle_subscription_menu(message)
        return

    await state.update_data(channel=message.text.strip())
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"))
    keyboard.add(KeyboardButton("–û—Ç–ø–∏—Å–∞—Ç—å—Å—è"))
    keyboard.add(KeyboardButton("‚¨Ö –ù–∞–∑–∞–¥"))
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    await SubscriptionStates.waiting_for_action.set()


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–µ–π—Å—Ç–≤–∏—è (–ø–æ–¥–ø–∏—Å–∫–∞/–æ—Ç–ø–∏—Å–∫–∞)
async def process_action(message: types.Message, state: FSMContext):
    if message.text.strip() == "‚¨Ö –ù–∞–∑–∞–¥":
        await state.finish()
        await handle_subscription_menu(message)
        return

    action = message.text.strip()
    if action not in ["–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è"]:
        await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.")
        return
    await state.update_data(action=action)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä 5):")
    await SubscriptionStates.waiting_for_delay.set()


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏
async def process_delay(message: types.Message, state: FSMContext):
    if message.text.strip() == "‚¨Ö –ù–∞–∑–∞–¥":
        await state.finish()
        await handle_subscription_menu(message)
        return

    try:
        delay = int(message.text.strip())
        await state.update_data(delay=delay)
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è:")
        await SubscriptionStates.waiting_for_account_count.set()
    except ValueError:
        await message.reply("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —Å–µ–∫—É–Ω–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5):")


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
async def process_account_count(message: types.Message, state: FSMContext):
    if message.text.strip() == "‚¨Ö –ù–∞–∑–∞–¥":
        await state.finish()
        await handle_subscription_menu(message)
        return

    try:
        account_count = int(message.text.strip())
        data = await state.get_data()
        channel = data['channel']
        action = data['action']
        delay = data['delay']

        accounts = get_all_accounts()[:account_count]  # –ë–µ—Ä–µ–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        if not accounts:
            await message.reply("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.")
            await state.finish()
            return

        await message.reply(f"–ù–∞—á–∏–Ω–∞—é {'–ø–æ–¥–ø–∏—Å–∫—É' if action == '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è' else '–æ—Ç–ø–∏—Å–∫—É'} –Ω–∞ {channel}...")
        await process_subscription(accounts, channel, action, delay, message)
        await state.finish()
    except ValueError:
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤.")


# –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏/–æ—Ç–ø–∏—Å–∫–∏
async def process_subscription(accounts, channel, action, delay, message):
    for account in accounts:
        phone, session_name, api_id, api_hash = account[1], account[2], account[3], account[4]
        client = TelegramClient(session_name, api_id, api_hash)

        try:
            await client.connect()
            if action == "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è":
                await client(JoinChannelRequest(channel))
                await message.reply(f"‚úÖ {phone} –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ {channel}")
            else:
                await client(LeaveChannelRequest(channel))
                await message.reply(f"‚ùå {phone} –æ—Ç–ø–∏—Å–∞–Ω –æ—Ç {channel}")
        except Exception as e:
            await message.reply(f"‚ö† –û—à–∏–±–∫–∞ —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º {phone}: {e}")
        finally:
            await client.disconnect()

        await asyncio.sleep(delay)  # –ó–∞–¥–µ—Ä–∂–∫–∞


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def register_subscription_handlers(dp: Dispatcher):
    dp.register_message_handler(handle_subscription_menu, Text(equals="üì¢ –ü–æ–¥–ø–∏—Å–∫–∞/–û—Ç–ø–∏—Å–∫–∞"), state=None)
    dp.register_message_handler(handle_choose_channel, Text(equals="‚ûï –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"), state=None)
    dp.register_message_handler(handle_choose_channel, Text(equals="‚ûñ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è"), state=None)
    dp.register_message_handler(handle_back, Text(equals="‚¨Ö –ù–∞–∑–∞–¥"), state="*")
    dp.register_message_handler(process_channel, state=SubscriptionStates.waiting_for_channel)
    dp.register_message_handler(process_action, state=SubscriptionStates.waiting_for_action)
    dp.register_message_handler(process_delay, state=SubscriptionStates.waiting_for_delay)
    dp.register_message_handler(process_account_count, state=SubscriptionStates.waiting_for_account_count)

async def handle_back(message: types.Message, state: FSMContext):
    from handlers.auth_handler import get_main_keyboard
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é .")
    await message.reply("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_main_keyboard())
    await state.finish()